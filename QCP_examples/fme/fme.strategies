//test curent rules
//max rule id:30

#include "fme_def.h"
#include "../verification_list.h"
#include "../verification_stdlib.h"

id : 5
priority : core(0)
right : InequList(NULL, ?n, ?l) at 0
action : right_erase(0);
         right_add(l == nil{<Constraint>});

id : 6
priority : core(0)
left : InequList(?p, ?n1, cons{<Constraint>}(?x0, ?l0)) at 0
right : InequList(p, ?n2, cons{<Constraint>}(?x1, ?l1)) at 1
action : left_erase(0);
         right_erase(1);
         right_add(n1 == n2);
         right_add(x0 == x1);
         right_add(l0 == l1);

id : 7
priority : core(1)
left : InequList(?p, ?n1, ?l0) at 0
right : InequList(p, ?n2, ?l1) at 1
action : left_erase(0);
         right_erase(1);
         right_add(n1 == n2);
         right_add(l0 == l1);

id : 8
priority : core(2)
left : InequList(?p, ?n, ?l0) at 0
       (n == ?m || ?m == n) at 1
right : InequList(p, m, ?l1) at 2
action : left_erase(0);
         right_erase(2);
         right_add(l0 == l1);

id : 9
priority : core(4)
left : InequList(?p, ?n, ?l) at 0
       (p != NULL || NULL != p) at 1
right : (data_at(field_addr(p, InequList, coef), PTR(I32), ?q) || data_at(field_addr(p, InequList, next), PTR(struct InequList), ?q)) at 2
action : left_erase(0);
         left_exist_add(x: <Constraint>);
         left_exist_add(l0: list{<Constraint>});
         left_add(InequList(p, n, cons{<Constraint>}(x, l0)));
         left_add(l == cons{<Constraint>}(x, l0));
 
id : 10
priority : core(4)
left : (?p != NULL || NULL != ?p) at 0
right : InequList(p, ?n, ?l) at 1
action : right_erase(1);
         right_exist_add(x: <Constraint>);
         right_exist_add(l0: list{<Constraint>});
         right_add(InequList(p, n, cons{<Constraint>}(x, l0)));
         right_add(l == cons{<Constraint>}(x, l0));
 
 
id : 11
priority : core(3)
left : InequList(?p, ?n, cons{<Constraint>}(?x, ?l)) at 0
action : left_erase(0);
         left_exist_add(y: Z);
         left_exist_add(h: Z);
         left_add(h != 0);
         left_add(data_at(field_addr(p, InequList, coef), PTR(I32), h));
         left_add(coef_array(h, n, x));
         left_add(data_at(field_addr(p, InequList, next), PTR(struct InequList), y));
         left_add(InequList(y, n, l));
 
id : 12
priority : core(3)
left : (?p != NULL || NULL != p) at 0
right : InequList(p, ?n, cons{<Constraint>}(?x, ?l)) at 0
action : right_erase(0);
         right_exist_add(y: Z);
         right_exist_add(h: Z);
         right_add(h != 0);
         right_add(data_at(field_addr(p, InequList, coef), PTR(I32), h));
         right_add(coef_array(h, n, x));
         right_add(data_at(field_addr(p, InequList, next), PTR(struct InequList), y));
         right_add(InequList(y, n, l));

id : 13
priority : core(1)
left : coef_array(?p, ?n1, ?l1) at 0
right : coef_array(p, ?n2, ?l2) at 1
action : right_erase(1);
         left_erase(0);
         right_add(n1 == n2);
         right_add(l1 == l2);

id : 14
priority : core(2)
left : coef_array(?p, ?n, ?l1) at 0
       (n == ?m || ?m == n) at 1
right : coef_array(p, m, ?l2) at 2
action : left_erase(0);
         right_erase(2);
         right_add(l1 == l2);

id : 15
priority : core(1)
left : coef_array(?p, ?n, ?l) at 0
right : data_at(?p + (?i * sizeof(I32)), I32, ?v) at 1
check : infer(0 <= i);
        infer(i < n);
        infer(p != 0);
action : right_erase(1);
         left_erase(0);
         left_add(coef_array_missing_i_rec(p, i, 0, n, l));
         right_add(v == coef_Znth(i, l, 0));

id : 16
priority : post(1)
left : coef_array_missing_i_rec(?p, ?i, 0, ?n, ?l) at 0
       data_at(p + i * sizeof(I32), I32, coef_Znth(i, l, 0)) at 1
check : infer(0 <= i);
        infer(i < n);
        infer(p != 0);
action : left_erase(1);
         left_erase(0);
         left_add(coef_array(p, n, l));

id : 17
priority : post(3)
left : coef_array_missing_i_rec(?p, ?i, 0, ?n, ?l) at 0
       data_at(p + i * sizeof(I32), I32, ?v) at 1
check : infer(1 <= i);
        infer(i < n);
        infer(p != 0);
action : left_erase(1);
         left_erase(0);
         left_add(coef_array(p, n, coef_replace_Znth(i, v, l)));

id : 18
priority : core(0)
right : InequList_seg(?p, p, ?n, ?l) at 0
        InequList(p, n, ?l0) at 1
action : right_erase(0);
         right_add(l == nil{<Constraint>});

id : 19
priority : core(0)
left : InequList_seg(?p, ?q, ?n1, ?l1) at 0
right : InequList_seg(p, q, ?n2, ?l2) at 1
action : left_erase(0);
         right_erase(1);
         right_add(n1 == n2);
         right_add(l1 == l2);
